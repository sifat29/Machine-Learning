{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"testing of triplet loss","provenance":[],"authorship_tag":"ABX9TyMBoxhBVXcYpmQ3wlzUKDmn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# a[0]\n","# a[1]\n","# a[2]"],"metadata":{"id":"lPxbNfn-ijLN","executionInfo":{"status":"ok","timestamp":1655610801100,"user_tz":-360,"elapsed":481,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["# alpha = 0.2\n","# anchor_image = a[0]\n","# positive_image = a[1]\n","# negative_image = a[2] \n","# positive_distance = np.sqrt((np.sum(np.square(anchor_image - positive_image))))\n","# negative_distance = np.sqrt((np.sum(np.square(anchor_image - negative_image))))\n","# print(\"positive\",positive_distance)\n","# print(\"negative\",negative_distance)\n","# loss1 = ((positive_distance - negative_distance)+ alpha)\n","# loss = np.clip(loss1, 0, None)\n","# print(\"the loss function\",loss)"],"metadata":{"id":"mGcPrOzXk0pG","executionInfo":{"status":"ok","timestamp":1655610801562,"user_tz":-360,"elapsed":44,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["#defining the triplet loss class\n","# class TripletLoss:\n","#   def __init__(self, margin):\n","#     self.margin = margin\n","# #calculate the loss function of triplet loss          \n","#   def loss(self,anchor, positive, negative):\n","#     positive_distance = np.sqrt((np.sum(np.square(anchor - positive))))\n","#     negative_distance = np.sqrt((np.sum(np.square(anchor - negative))))\n","#     loss1 = ((positive_distance - negative_distance)+ self.margin)\n","#     loss = np.clip(loss1, 0, None)\n","#     return loss\n","    "],"metadata":{"id":"PcZDJ1eW8QYr","executionInfo":{"status":"ok","timestamp":1655610801564,"user_tz":-360,"elapsed":43,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["# anchor_image = a[0]\n","# positive_image = a[1]\n","# negative_image = a[2]\n","# x= TripletLoss(0.2)\n","# output = x.loss(anchor_image, positive_image, negative_image)\n","# print(output)"],"metadata":{"id":"DQzOfswNC1Nw","executionInfo":{"status":"ok","timestamp":1655610801565,"user_tz":-360,"elapsed":42,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch.nn.modules.loss import TripletMarginLoss\n","import numpy as np\n","#generating random (1,128) array for testing\n","anchor1=[]\n","positive1=[]\n","negative1=[]\n","for i in range(0,10):\n","  anchor1.append((np.random.normal(5, 2, size=[1,128])))\n","  positive1.append((np.random.normal(5, 2, size=[1,128])))\n","  negative1.append((np.random.normal(4, 2, size=[1,128])))"],"metadata":{"id":"ZYJ_p-a5UmcU","executionInfo":{"status":"ok","timestamp":1655610801567,"user_tz":-360,"elapsed":43,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["import torch\n","from torch.nn.modules.loss import TripletMarginLoss\n","for i in range(10):\n","  anchor1[i]=torch.from_numpy(anchor1[i])\n","  positive1[i]=torch.from_numpy(positive1[i])\n","  negative1[i]=torch.from_numpy(negative1[i])"],"metadata":{"id":"Fr42o0RV29gY","executionInfo":{"status":"ok","timestamp":1655610801569,"user_tz":-360,"elapsed":43,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["#defining the triplet loss class\n","class TripletLoss1:\n","  def __init__(self, margin):\n","    self.margin = margin\n","#calculate the loss function of triplet loss          \n","  def loss(self,anchor, positive, negative):\n","    positive_distance =torch.sqrt(torch.sum(torch.square(anchor - positive)))\n","    negative_distance =torch.sqrt(torch.sum(torch.square(anchor - negative)))\n","    loss1 = ((positive_distance - negative_distance)+ self.margin)\n","    loss = torch.clip(loss1, 0, None)\n","    return loss"],"metadata":{"id":"Lu2fXls739ma","executionInfo":{"status":"ok","timestamp":1655610801572,"user_tz":-360,"elapsed":45,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["import time\n","start = time.time()\n","print(\"Time elapsed on working...\")\n","for i in range(10):\n","  x= TripletLoss1(0.2)\n","  output = x.loss(anchor1[i], positive1[i], negative1[i])\n","  print(output)\n","end = time.time()\n","time_dif= ((end - start)* 1000)\n","print('Execution time:', time_dif, 'milliseconds')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WpEVj2CERSYi","executionInfo":{"status":"ok","timestamp":1655610801574,"user_tz":-360,"elapsed":46,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}},"outputId":"9c45e16b-b736-4042-fa66-cdaee38acf58"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["Time elapsed on working...\n","tensor(0., dtype=torch.float64)\n","tensor(2.3829, dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0.5752, dtype=torch.float64)\n","tensor(1.0054, dtype=torch.float64)\n","tensor(2.0582, dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","Execution time: 11.40141487121582 milliseconds\n"]}]},{"cell_type":"code","source":["# import torch\n","# from torch.nn.modules.loss import TripletMarginLoss\n","# for i in range(10):\n","#   anchor1[i]=torch.from_numpy(anchor1[i])\n","#   positive1[i]=torch.from_numpy(positive1[i])\n","#   negative1[i]=torch.from_numpy(negative1[i])"],"metadata":{"id":"2qttgHxejzjr","executionInfo":{"status":"ok","timestamp":1655610801575,"user_tz":-360,"elapsed":42,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["start = time.time()\n","print(\"Time elapsed on offical pytorch tripletloss working...\")\n","for i in range(10):\n","  triplet_loss = TripletMarginLoss(margin=0.2, p=2)\n","  output = triplet_loss(anchor1[i], positive1[i], negative1[i])\n","  print(output)\n","end = time.time()\n","time_dif= ((end - start)* 1000)\n","print('Execution time:', time_dif, 'milliseconds')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6vCM9cQCLSvr","executionInfo":{"status":"ok","timestamp":1655610801577,"user_tz":-360,"elapsed":42,"user":{"displayName":"fahim sifat","userId":"09905140434680475493"}},"outputId":"f9f18716-c09f-4117-9784-5d76d4db86ad"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["Time elapsed on offical pytorch tripletloss working...\n","tensor(0., dtype=torch.float64)\n","tensor(2.3829, dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0.5752, dtype=torch.float64)\n","tensor(1.0054, dtype=torch.float64)\n","tensor(2.0582, dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","tensor(0., dtype=torch.float64)\n","Execution time: 13.785123825073242 milliseconds\n"]}]}]}